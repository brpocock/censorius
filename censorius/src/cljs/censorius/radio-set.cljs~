(ns censorius.radio
  (:require-macros [cljs.core.async.macros :refer [go alt!]])
  (:require
   [cljs.core.async :refer [put! chan <!]]
   [clojure.data :as data]
   [clojure.string :as string]
   [goog.events :as events]
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [secretary.core :as secretary]
            
   [censorius.utils :as util])
  (:import [goog History]
           [goog.history EventType]))

(defn radio-set [cursor owner {:keys [label key tags]}]
  (let [name (util/gensymreally label)] 
    (reify 
      om/IInitState
      (init-state [_]
        {:label label
         :key key
         :tags tags})
      
      om/IDisplayName
      (display-name [_]
        (str "Radio group " label "=" name))
      
      om/IRenderState
      (render-state [_ {:keys [label key tags]}]
        (let [key-string (.substring (str key) 1 (count (str key)))] 
          [:fieldset {}
           [:label {}
            label]
           (map (fn [[tag name]]
                  [:div {}
                   [:label {}
                    [:input {:name (str name "-" key-string)
                            :type "radio"
                            :value (str tag)
                            :on-click
                            (fn [event]
                              (let [node (.-target event)
                                    checked (.-checked node)]
                                (if checked
                                  (om/update! cursor key tag))))
                            :checked (= tag (get cursor key))}]
                    name]]) 
                tags)])))))
