(ns censorius.text
  (:require-macros [cljs.core.async.macros :refer [go alt!]])
  (:require
            [cljs.core.async :refer [put! chan <!]]
            [clojure.data :as data]
            [clojure.string :as string]
            [goog.events :as events]
            [reagent.core :as reagent :refer [atom]]
            [reagent.session :as session]
            [secretary.core :as secretary]
            
            [censorius.utils :as util])
  (:import [goog History]
           [goog.history EventType]))



(def +clear+ 12)
(def +return+ 13)
(def +escape+ 27)

(defn confirm-change [label text]
  (js/window.confirm (str
                      "“"
                      text
                      "” does not appear valid for “"
                      label
                      "”.\nDo you want to submit it?\n\nClick OK to confirm this value, or Cancel to edit.")))

(defn do-validate [owner new-text]
  (let [validate (:validate owner)
        could-validate? (and validate 
                             (string? new-text)
                             (not (string/blank? (.trim new-text))))
        validated? (and could-validate?
                        (apply validate (list new-text)))]
    (swap! owner assoc :validated? (cond 
                                    (not could-validate?) nil
                                    validated? true
                                    true false))
    (and (or validated? 
             (not could-validate?)) 
         true)))

(defn validate-submission [owner text can-prompt?]
  (let [valid-1? (do-validate owner text)
        valid-2? (or valid-1?
                     (and can-prompt? 
                          (when (confirm-change (:label owner) text)
                            (util/log "User confirms, store invalid value.")
                            (swap! owner assoc :validated? nil)
                            true)))]
    (or valid-1? valid-2?)))


(defn submit 
  ([event cursor owner]
   (submit event cursor owner false))
  ([event cursor owner suppress-prompt?]
   (let [text (:text owner)
         korks (:korks owner)
         old-text (get (deref cursor) korks)]
     #_ (util/log "Considering to submit change to " korks)
     (cond (= old-text text) (util/log "no change to " korks)
       
           (not (validate-submission owner text (not suppress-prompt?)))
           (util/log "no change to " korks ": validation failed")
       
           true
           (let [formatter (:format owner)
                 final-text (if formatter 
                              (apply formatter (list text))
                              text)]
             (when (not= text final-text)
               (swap! owner assoc :text final-text))
             (util/log korks " ← “" final-text "”")
             (swap! cursor assoc korks final-text)
             (swap! owner assoc :orig-text final-text))))
   false))

(defn mkfun-validity-submit [cursor owner]
  (fn [event]
    (when (.contains (.-className (.-target event)) "valid-false")
      (util/log "Field doesn't seem valid. Verifying user intent." event)
      (submit event cursor owner))))

(defn do-change [owner new-text]
  (when (string? new-text)
    (do-validate owner new-text)
    (swap! owner assoc :text new-text)))

(defn key-down [event cursor owner want-return?]
  (cond (#{+escape+ +clear+} (.-keyCode event)) 
        (do-change owner (:orig-text owner))
    
        (and want-return?
             (== +return+ (.-keyCode event))) (submit event cursor owner)
         
        true nil))

(defn change [event owner]
  (let [node (.-target event)
        new-text (.-value node) 
        ;; sel-from (.-selectionStart node)
        ;; sel-to (.-selectionEnd node)
        ]
    (do-change owner new-text)))

(defn text-input [cursor {:keys [korks label rows size
                                 placeholder validate
                                 format input-type ellipsis]}]
  (let [name (util/gensymreally label)
        owner (atom {:korks korks
                     :label label
                     :rows (or rows 1)
                     :placeholder placeholder
                     :text (or (get cursor korks) "")
                     :orig-text (or (get cursor korks) "")
                     :validate validate
                     :validated? nil
                     :input-type input-type
                     :ellipsis ellipsis
                     :size size
                     :format format})] 
    #_
    (will-mount [_]
                (do-validate owner (:text owner)))
    
    #_
    (will-receive-props [_ new-props]
                        (let [before (:orig-text owner)
                              current (:text owner)
                              after (get new-props korks)]
                          (when (and (= before current)
                                     (not= before after)
                                     (string? after))
                            (do (util/log "Resetting " name " from " korks
                                          " ⇒ “" after
                                          "”")
                                (do-change owner after)
                                (swap! owner assoc :orig-text after)))))
    
    #_
    (did-update [_ _ _]
                (when (:needs-focus owner)
                  (when-let [node (util/get-child owner name)]
                    (let [length (.-length (.-value node))]
                      (.focus node)
                      (.setSelectionRange node length length)))
                  (swap! owner assoc :needs-focus nil))
                (when-let [where-to (:needs-cursor-set owner)]
                  (when-let [node (util/get-child owner name)]
                    (.setSelectionRange node where-to where-to))
                  (swap! owner assoc :needs-cursor-set nil)))
    
    (fn [{:keys [label text placeholder rows input-type 
                 korks validate validated?]}]
      (let [[validity validity-sigil]
            (case validated?
              false [false "✗"]
              true [true "⛤"]
              nil ["unknown" " "])]
        (cond
         ;; inline
         (= 0 rows)
         [:span [:input {:name name
                         :type (or input-type "text")
                         :id name
                         :value text
                         :size size
                         :class (str "valid-" validity " size-" size)
                         :placeholder placeholder
                         :on-blur #(submit % cursor owner true)
                         :on-change #(change % owner)
                         :on-key-down #(key-down % cursor owner true)
                         :title label}]
          (when ellipsis
            [:button {:on-click #(apply ellipsis korks)} "…"])
          (when validate
            [:span {:class (str "marker valid-" validity)
                    :on-click (mkfun-validity-submit cursor owner)}
             validity-sigil])]
         
         ;; text-entry box, single-row
         (= 1 rows)
         [:div [:label {:class "two-column"}
                (str label ":")
                [:input {:name name
                         :type (or input-type "text")
                         :id name
                         :value text
                         :class (str "valid-" validity " size-" size)
                         :placeholder placeholder
                         :on-blur #(submit % cursor owner true)
                         :on-change #(change % owner)
                         :on-key-down #(key-down % cursor owner true)
                         :title (if placeholder
                                  (str label " (" placeholder ")")
                                  label)}]
                (when ellipsis
                  [:button {:on-click #(apply ellipsis korks)} "…"])
                (when validate
                  [:span {:class (str "marker " 
                                      (str "valid-" validity))
                          :on-click (mkfun-validity-submit cursor owner)}
                   validity-sigil])]]
                     
                     
         ;; text-entry area, multi-row
         true
         [:fieldset [:legend [:label {:for (str "textarea-" name)} label] 
                     (when ellipsis
                       [:button {:on-click #(apply ellipsis korks)} "…"])
                     (when validate
                       [:span {:class (str "marker valid-" validity)} 
                        validity-sigil])]
          [:textarea {:name name
                      :id name
                      :rows rows
                      :class validity
                      :placeholder placeholder
                      :title (str label (if placeholder
                                          (str " (" placeholder ")")
                                          ""))
                      :on-blur #(submit % cursor owner true)
                      :on-change #(change % owner)
                      :on-key-down #(key-down % cursor owner false)
                      :value text}]])))))



